def dockerImage

pipeline{
    agent any

    tools {
        maven "mvn3.9.10"
        jdk "jdk21"
    }

    environment {
        aws_region = "us-east-1"
        registry_url = "886436923743.dkr.ecr.us-east-1.amazonaws.com"
        image_name = "vproappimg"
        image_url = "${registry_url}/${image_name}"
        build_number = "${env.BUILD_NUMBER}"
        ecs_cluster = "cluster-vproapp"
        ecs_service = "service-vproapp"
    }

    stages {
        stage("Fetch") {
            steps {
                git branch: "docker", url: "https://github.com/hkhcoder/vprofile-project.git"
            }
        }

        stage("Unit Tests") {
            steps {
                sh "mvn clean test"
            }
        }

        stage("Checkstyle analysis") {
            steps {
                sh "mvn checkstyle:checkstyle"
            }
        }

        stage("Build") {
            steps {
                sh "mvn clean install"
            }

            post {
                success {
                    echo "Build successful!"
                    archiveArtifacts artifacts: "**/target/*.war", fingerprint: true
                }

                failure {
                    echo "Build failed!"
                }
            }
        }

        stage("SonarQube analysis") {
            environment {
                sonar_home= tool name: "sonarscanner7.1.0"
            }

            steps {
                withSonarQubeEnv("local-sonar-server") {
                    sh """${sonar_home}/bin/sonar-scanner \
                        -D sonar.projectKey=vprofile \
                        -D sonar.projectName=vprofile \
                        -D sonar.projectVersion=1.0 \
                        -D sonar.sources=src/main/java \
                        -D sonar.java.binaries=target/classes \
                        -D sonar.junit.reportsPath=target/surefire-reports/ \
                        -D sonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
                        -D sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    """
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                    dockerImage = docker.build("${image_url}:${build_number}", "-f ./Docker-files/app/multistage/Dockerfile .")
                }
            }
        }

        stage("Authorize Access to Registry") {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "ecs-ecr-cred"]]) {
                    sh "aws ecr get-login-password --region ${aws_region} | docker login --username AWS --password-stdin ${registry_url}"
                }
            }
        }

        stage("Push Docker Image") {
            steps {
                script {
                    dockerImage.push("${build_number}")
                    dockerImage.push("latest")
                }
            }
        }

        stage("Remove Local Docker Image") {
            steps {
                script {
                    sh "docker rmi ${image_url}:${build_number}"
                    sh "docker rmi ${image_url}:latest"
                }
            }
        }

        stage("Logout from Docker Registry") {
            steps {
                sh "docker logout ${registry_url}"
            }
        }
        
        stage("Update ECS Containers") {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "ecs-ecr-cred"]]) {
                    sh "aws ecs update-service --cluster ${ecs_cluster} --service ${ecs_service} --force-new-deployment --region ${aws_region}"
                }
            }
        }

    }
}